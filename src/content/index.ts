import { getCollection, getEntry, render } from 'astro:content'
import { groupBy, uniq } from 'lodash-es'
import { getYear } from 'date-fns'

import type { CollectionEntry } from 'astro:content'

/** All posts sorted by created dates */
export async function getPosts() {
  const collection = await getCollection('posts', ({ data }) => import.meta.env.PROD ? !data.draft : true)
  const posts = collection.toSorted((a, b) => b.data.created.valueOf() - a.data.created.valueOf())

  return posts
}

/** Group posts by years */
export function groupByYear(posts: CollectionEntry<'posts'>[]) {
  const groups = Object.entries(groupBy(posts, (post) => getYear(post.data.created)))
    .map(([year, posts]) => ({ year, posts }))
    .toSorted((a, b) => Number(b.year) - Number(a.year))

  return groups
}

/** Get tags from posts */
export function getTags(posts: CollectionEntry<'posts'>[]) {
  const tags = uniq(posts.flatMap((post) => post.data.tags).filter(Boolean)) as string[]

  return tags
}

/** Count words (generated by Doubao AI) */
export function countWords(markdown?: string): number {
  if (!markdown) return 0
  
  let text = markdown

  // 1. 移除 HTML 标签
  // 使用正则表达式匹配所有 HTML 标签（以 < 开头，以 > 结尾的内容），并将其替换为空字符串
  text = text.replace(/<[^>]*>/g, '')

  // 2. 移除行内代码块的反引号
  // 使用正则表达式匹配行内代码块（以单个 ` 开头和结尾的内容），并将反引号去掉，保留代码内容
  text = text.replace(/`([^`]*)`/g, '$1')

  // 3. 移除多行代码块的反引号
  // 使用正则表达式匹配多行代码块（以 ``` 开头和结尾的内容），并将 ``` 去掉，保留代码内容
  text = text.replace(/```[\s\S]*?```/g, (match) => match.replace(/```/g, ''))

  // 4. 移除 Markdown 列表标记
  // 使用正则表达式匹配列表标记（如 -、*、+ 或数字加. 开头，后面跟一个空格的内容），并将其替换为空字符串
  text = text.replace(/^([-*+]|\d+\.)\s/gm, '')

  // 5. 移除 Markdown 标题标记
  // 使用正则表达式匹配标题标记（以一个或多个 # 开头，后面跟一个空格的内容），并将其替换为空字符串
  text = text.replace(/^(#+)\s/gm, '')

  // 6. 移除 Markdown 链接标记，仅保留链接文本
  // 使用正则表达式匹配链接标记（格式为 [链接文本](链接地址)），并将其替换为链接文本
  text = text.replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')

  // 7. 移除 Markdown 图片标记
  // 使用正则表达式匹配图片标记（格式为 ![图片描述](图片地址)），并将其替换为空字符串
  text = text.replace(/!\[([^\]]*)\]\([^)]+\)/g, '')

  // 8. 统计字数
  // 使用正则表达式匹配中文字符和连续的英文字符、数字组成的单词
  // [\u4e00-\u9fa5] 匹配中文字符，[a-zA-Z0-9]+ 匹配连续的英文字符或数字
  const matches = text.match(/[\u4e00-\u9fa5]|[a-zA-Z0-9]+/g)
  // 如果有匹配结果，返回匹配结果的数量，即字数；如果没有匹配结果，返回 0
  return matches ? matches.length : 0
}

/** Render a fragment */
export async function renderFragment(slug: string) {
  const entry = await getEntry('fragments', slug)!
  const { Content } = await render(entry)

  return Content
}
